using System;
using FleetManagement.Business.Managers;
using FleetManagement.Business.Entities;
using FleetManagement.Data.Repositories;
using System.Collections.Generic;
using System.Linq;

namespace FleetManagement.ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            InitRepository repo = new InitRepository();

            Console.WriteLine("Working...");

            List<FuelCard> fuelCards = new List<FuelCard>();
            for(int i = 0; i < 1000; i++)
            {
                FuelCard fuelCard = RandomFuelCard();
                fuelCards.Add(fuelCard);
            }

            repo.BulkInsertFuelCard(fuelCards);

            Console.WriteLine("Done!");





        }


        // CREATION OF DRIVERS
        private static List<string> firstNames = new List<string>
        {
            "Liam",
            "Noah",
            "Oliver",
            "Elijah",
            "William",
            "James",
            "Benjamin",
            "Lucas",
            "Henry",
            "Alexander",
            "Olivia",
            "Emma",
            "Ava",
            "Charlotte",
            "Sophia",
            "Amelia",
            "Isabella",
            "Mia",
            "Evelyn",
            "Harper"
        };
        private static List<string> lastNames = new List<string>
        {
            "Smith",
            "Johnson",
            "Williams",
            "Brown",
            "Jones",
            "Garcia",
            "Miller",
            "Davis",
            "Rodriguez",
            "Martinez",
            "Hernandez",
            "Lopez",
            "Gonzalez",
            "Wilson",
            "Anderson",
            "Thomas",
            "Taylor",
            "Moore",
            "Jackson",
            "Martin",
            "Lee",
            "Perez",
            "Thompson",
            "White",
            "Harris",
            "Sanchez",
            "Clark",
            "Ramirez",
            "Lewis",
            "Robinson",
            "Walker",
            "Young",
            "Allen",
            "King",
            "Wright",
            "Scott",
            "Torres",
            "Nguyen",
            "Hill",
            "Flores",
            "Green",
            "Adams",
            "Nelson",
            "Baker",
            "Hall",
            "Rivera",
            "Campbell",
            "Mitchell",
            "Carter",
            "Roberts"
        };
        private static DateTime randomDateOfBirth()
        {
            Random r = new Random();
            return new DateTime(r.Next(1965, 2000), r.Next(1, 13), r.Next(1, 28));
        }
        private static Address randomAddress()
        {
            Random r = new Random();
            string c = "abcdefghijklmnopqrstuvwxyz";
            string v = "aeiouy";
            List<string> cities = new List<string> {
                "Aberdeen",
                "Armagh",
                "Bangor",
                "Bath",
                "Belfast",
                "Birmingham",
                "Bradfort",
                "Cambridge",
                "Cardiff",
                "Carlisle",
                "Chelmsford",
                "Chester",
                "Derby",
                "Dundee",
                "Durham",
                "Edinburgh",
                "Ely",
                "Glasgow",
                "Hereford",
                "Leeds",
                "Lancaster",
                "Leicester",
                "Lichfield",
                "Lincoln",
                "Liverpool",
                "London",
                "Manchester",
                "Newcastle",
                "Newport",
                "Norwich",
                "Nottingham",
                "Oxford",
                "Petersborough"
            };

            List<string> countries = new List<string> { "Wales", "Scotland", "England", "North-America", "Ireland" };

            string street = c[r.Next(0, 26)].ToString().ToUpper() + v[r.Next(0, 6)].ToString() + c[r.Next(0, 26)].ToString() + " Road";
            string houseNr = r.Next(1, 300).ToString();
            string postalCode = r.Next(1, 10).ToString() + r.Next(1, 10).ToString() + r.Next(1, 10).ToString() + r.Next(1, 10).ToString();

            Address address = new Address(street, houseNr, postalCode, cities[r.Next(1, cities.Count())], countries[r.Next(1, countries.Count())]);

            return address;
        }
        private static List<string> ThousandSecurityNr = new List<string>(){
"40.05.05-849.70","69.12.02-862.29","11.12.26-672.56","99.04.23-069.87","40.05.08-502.36","92.04.05-859.78","69.05.21-323.46","22.04.27-412.73","28.10.20-702.64","44.06.23-948.07","57.02.17-678.23","82.05.19-671.31","92.08.23-577.42","22.09.09-020.70","77.03.17-282.70","40.06.28-867.48","84.03.02-032.44","98.08.11-695.22","66.10.06-335.68","06.10.23-269.42","26.03.23-346.45","40.02.01-953.65","53.10.06-412.09","46.08.04-467.47","49.10.21-026.55","85.06.23-871.72","48.04.08-737.59","41.02.16-292.06","62.02.03-009.53","59.10.19-098.59","19.09.15-644.76","36.01.23-903.43","84.04.22-611.36","27.07.02-117.80","28.07.08-642.75","66.05.22-371.02","16.01.01-347.92","65.12.13-419.58","48.01.28-700.57","13.01.25-640.83","84.10.06-263.33","56.12.03-697.85","78.04.14-636.28","45.09.11-426.58","66.06.17-351.82","48.06.04-410.35","21.09.25-355.10","56.12.19-969.12","39.08.08-803.26","20.08.20-765.13","38.10.12-099.21","75.08.08-803.06","22.03.10-755.39","71.03.13-191.58","75.09.30-095.61","10.08.09-682.22","89.08.01-103.46","39.10.28-195.48","08.03.05-849.92","14.10.27-716.31","16.04.28-271.58","85.03.18-901.74","09.11.28-318.10","33.09.24-921.85","91.10.26-307.21","87.02.22-681.15","68.01.24-353.71","88.07.02-094.94","87.06.07-124.80","07.10.21-988.83","55.06.18-513.47","86.09.03-443.75","43.12.25-715.07","65.07.21-981.94","78.08.29-707.20","04.06.03-176.83","76.01.27-870.20","22.07.01-499.11","98.10.30-118.43","16.10.01-887.03","33.01.11-996.53","98.10.24-174.70","40.08.14-328.51","83.08.25-598.63","71.08.18-248.80","33.03.02-979.63","40.07.13-567.29","53.05.02-617.83","14.03.24-806.79","64.07.16-627.92","14.08.07-738.13","50.03.28-666.50","51.04.15-502.50","42.10.14-210.31","06.06.03-141.63","71.04.21-742.50","68.03.17-970.66","29.04.20-699.46","60.12.03-335.46","90.07.01-657.88","42.11.22-519.71","82.07.30-725.49","72.07.13-060.44","14.02.24-799.79","66.10.11-597.44","17.05.30-722.60","13.06.22-415.45","14.09.01-792.49","03.05.25-364.80","04.03.03-082.59","44.10.18-262.95","62.02.09-573.85","01.04.26-147.24","33.11.21-859.57","51.05.14-478.14","67.11.02-432.22","87.09.07-160.65","18.10.26-638.29","82.10.26-549.75","24.03.15-362.33","09.12.04-623.44","67.01.10-463.69","41.04.23-562.25","44.02.22-604.62","62.11.12-485.49","94.07.17-495.48","72.09.10-395.07","25.01.04-041.12","46.10.28-485.02","61.05.08-530.61","99.08.03-974.04","15.09.21-898.43","28.03.23-645.79","60.05.26-596.16","55.03.02-469.65","32.04.03-133.89","27.06.07-881.32","89.11.11-886.51","29.10.12-798.35","27.03.18-073.04","80.02.27-515.78","91.03.07-403.58","07.06.06-785.29","26.06.27-095.03","49.03.17-526.14","08.04.01-273.19","20.09.10-138.74","85.04.27-830.76","92.11.22-716.51","32.11.20-939.83","20.01.12-918.51","33.09.29-233.41","78.10.08-416.82","23.05.19-180.88","60.11.18-343.66","29.12.20-278.38","23.04.20-162.69","85.11.18-855.79","16.06.22-006.32","07.04.25-285.42","71.01.26-517.07","63.12.29-560.74","69.04.07-815.64","15.03.23-598.47","62.01.24-059.45","34.02.27-437.63","84.10.01-965.63","89.08.10-504.54","80.04.27-664.40","10.03.20-816.08","33.03.24-037.54","49.11.30-528.66","94.04.14-649.60","43.08.15-664.39","91.02.04-574.67","93.02.14-839.29","44.08.29-161.46","04.06.17-617.95","98.12.28-529.94","11.11.19-088.67","21.06.15-582.62","36.11.18-655.26","94.07.13-068.13","07.11.24-064.51","85.01.15-184.91","51.10.19-071.15","70.05.13-012.36","85.04.04-997.17","24.10.01-330.49","59.08.24-723.46","08.10.13-468.88","24.07.06-925.59","72.03.20-332.19","51.07.01-543.62","66.11.27-671.79","27.05.30-249.64","72.05.10-147.33","56.09.16-044.36","62.10.23-133.64","80.06.06-109.75","91.11.01-990.95","21.02.27-593.51","30.01.07-439.17","54.05.24-329.23","33.10.01-636.97","94.02.04-772.29","95.02.20-327.15","72.09.11-242.33","81.03.11-582.34","54.08.30-188.05","71.11.28-866.56","38.05.20-397.30","86.02.04-404.35","40.07.20-564.16","03.04.02-304.47","19.07.11-392.46","79.12.14-223.33","01.09.15-684.46","36.04.06-443.64","69.02.23-538.41","17.10.08-219.94","92.04.19-220.06","69.02.26-393.96","36.07.22-143.02","44.04.19-570.06","70.01.25-334.05","81.03.29-465.96","52.05.25-300.77","61.08.06-431.47","96.05.13-300.03","14.08.23-025.52","35.07.13-667.18","54.09.02-286.75","36.05.05-591.50","54.09.12-598.45","52.08.21-989.14","16.10.03-010.44","33.05.15-381.91","47.05.12-993.57","16.01.29-572.94","01.09.25-797.21","10.04.05-895.95","62.10.21-899.37","56.05.29-481.54","07.02.03-347.44","28.01.21-141.47","72.03.15-847.42","18.04.26-419.12","41.03.02-649.76","27.05.05-912.54","57.07.09-181.19","33.08.30-849.67","30.03.06-356.47","57.06.21-257.61","44.10.25-272.69","49.02.10-694.49","49.12.22-897.41","28.03.26-867.58","71.02.11-082.26","44.05.17-262.90","62.09.17-610.51","44.12.20-504.01","05.12.08-227.42","78.09.04-096.30","65.01.11-271.92","47.01.10-604.90","85.06.30-062.89","20.09.06-537.86","93.03.14-597.84","22.04.05-545.18","79.05.17-743.53","98.04.05-155.35","79.08.22-122.60","63.02.21-930.68","38.09.27-691.39","40.02.17-951.72","45.05.23-266.24","40.12.06-428.25","38.11.09-186.31","39.11.22-729.89","37.06.26-205.28","81.08.12-768.47","67.02.10-042.12","31.08.30-964.07","30.02.19-580.08","30.12.14-406.14","64.01.09-730.60","21.10.19-557.92","07.08.14-336.58","65.03.18-519.36","79.11.14-681.53","18.10.23-752.05","81.06.15-674.37","58.12.30-174.34","75.12.21-587.54","67.03.30-455.73","92.01.29-573.11","56.08.03-113.59","19.02.28-255.26","14.07.28-423.79","37.09.26-542.03","69.05.22-837.84","76.03.11-275.42","12.05.05-742.06","98.07.18-128.81","55.01.27-780.57","87.07.01-284.10","85.07.28-008.16","25.01.01-384.50","40.02.27-198.40","71.03.29-539.06","19.09.17-935.16","49.01.05-949.34","59.09.23-141.83","91.01.09-837.35","61.04.27-497.02","32.02.08-419.27","99.01.04-077.46","22.08.28-862.09","92.01.21-617.13","57.12.17-391.89","46.06.05-005.77","67.01.02-945.21","38.03.24-797.78","78.07.01-724.60","57.05.15-537.51","68.09.06-957.63","04.08.08-077.46","78.05.15-878.54","70.09.10-419.38","76.07.12-161.57","70.04.16-200.42","09.08.22-003.96","13.11.22-618.71","21.01.28-709.92","25.05.14-196.70","88.06.13-289.47","08.11.16-463.10","37.04.26-221.95","58.04.23-073.95","93.05.21-829.44","82.12.11-712.85","95.06.19-720.68","56.07.02-111.84","49.06.21-859.67","63.01.04-825.94","24.09.17-285.92","04.11.27-905.27","26.10.12-618.55","90.07.13-392.90","93.01.17-585.89","05.07.13-551.18","08.09.14-439.80","25.03.06-614.72","81.12.25-164.95","49.03.30-550.85","20.10.18-286.81","77.01.12-590.92","67.10.13-410.95","84.10.02-397.19","59.03.24-695.39","68.03.30-144.17","30.11.01-700.06","86.05.17-651.01","51.09.07-852.72","38.12.10-243.48","36.10.01-682.17","22.04.05-017.61","97.09.06-948.02","78.08.23-463.56","23.01.04-956.25","90.05.10-036.37","56.02.22-023.22","18.02.19-552.75","82.09.17-829.58","65.12.30-336.19","02.02.24-377.55","73.05.11-669.84","08.10.19-791.70","78.12.26-551.03","52.12.08-721.21","89.12.27-462.02","27.08.21-164.52","97.08.11-572.27","22.10.10-350.08","07.10.08-413.78","57.05.07-551.83","45.12.17-433.86","32.08.03-736.96","16.06.30-280.03","78.09.04-716.89","30.09.29-117.26","89.11.20-379.94","66.06.18-921.64","25.04.02-908.02","19.07.18-518.01","72.07.03-862.27","36.03.14-840.02","78.05.22-454.74","92.08.21-926.44","17.09.30-965.39","84.06.19-233.33","65.05.08-315.69","41.11.04-245.88","42.09.27-843.68","25.01.13-838.12","33.10.16-296.84","59.01.15-109.08","76.05.13-363.05","42.11.11-939.78","39.10.03-405.06","87.01.26-944.13","78.12.05-901.89","20.01.12-165.28","68.05.29-379.20","50.11.25-051.35","83.12.03-498.75","31.04.27-697.45","04.01.03-302.19","33.09.24-381.43","92.12.04-877.49","48.11.18-330.21","61.08.27-447.80","68.02.18-071.55","37.06.27-650.38","65.06.29-990.32","58.01.08-126.83","89.12.06-459.53","37.07.01-457.48","73.01.25-108.03","79.03.28-859.78","85.07.18-853.53","38.05.13-299.47","65.11.28-619.80","81.11.26-726.78","50.05.24-228.40","12.11.25-685.87","40.08.16-964.34","45.08.22-398.40","30.01.30-730.06","08.07.16-529.13","72.04.04-805.33","87.04.10-233.61","22.05.23-301.20","23.10.10-115.70","72.04.03-177.12","38.07.30-719.04","13.11.09-713.75","79.01.12-166.73","81.08.02-306.33","95.07.22-455.56","07.07.08-091.88","26.07.27-210.89","20.04.08-790.29","71.06.15-106.07","22.06.07-603.11","43.12.02-645.88","98.07.22-100.86","68.03.15-083.43","41.01.08-527.04","17.12.10-362.02","11.06.05-510.30","09.08.02-123.91","19.04.15-726.56","32.01.06-129.79","55.12.29-765.89","55.01.14-205.52","91.12.09-958.88","70.05.22-876.66","52.05.26-922.07","20.03.18-991.06","43.08.23-372.91","38.03.12-359.03","53.04.14-453.74","88.10.26-288.74","33.05.18-093.95","28.08.18-414.10","26.07.14-215.86","47.09.14-413.23","12.09.09-027.47","09.03.15-651.11","06.03.20-911.23","18.09.27-363.73","40.09.27-759.13","93.08.26-830.11","01.02.28-141.53","26.09.28-759.09","50.05.22-993.14","86.12.03-689.44","69.02.09-182.41","56.09.17-610.22","11.10.19-930.91","54.12.07-299.30","65.04.24-870.94","84.03.10-454.61","92.09.25-695.65","27.01.18-128.32","51.12.03-544.36","08.06.30-169.43","22.04.01-048.53","41.01.22-109.02","98.12.30-856.95","83.08.10-843.74","17.01.02-146.90","10.03.30-591.30","41.12.06-481.90","20.09.10-874.17","02.03.20-101.70","69.01.21-852.71","42.05.12-718.33","32.05.13-200.20","09.03.11-595.90","68.01.05-331.81","15.12.03-087.57","49.12.19-561.79","56.11.08-028.15","73.08.21-494.77","00.01.24-271.15","43.08.22-322.74","25.03.29-678.94","95.01.22-863.91","98.10.18-092.41","89.06.01-629.88","10.10.04-601.73","32.03.21-964.69","67.08.01-674.80","15.07.14-570.82","53.02.23-514.20","87.08.21-093.93","83.05.14-024.73","59.01.10-959.84","12.06.23-006.15","84.02.23-151.64","66.02.06-036.20","79.05.26-788.29","64.08.12-524.31","54.04.15-765.44","02.07.16-010.18","62.04.09-354.27","54.02.09-910.65","24.02.17-441.81","79.06.03-619.22","24.08.02-238.97","10.07.12-201.18","24.05.19-129.63","31.09.03-207.29","65.03.20-173.31","97.09.03-428.30","49.08.22-501.21","54.06.26-310.86","58.10.27-543.32","73.12.01-307.19","57.04.06-899.49","21.01.12-388.20","47.05.27-104.11","52.08.14-143.03","41.11.26-192.63","32.12.14-394.39","78.05.21-717.35","68.05.08-089.67","25.12.11-098.16","46.07.19-318.30","22.10.25-678.06","33.05.20-371.48","44.08.19-789.09","47.07.14-727.83","24.11.27-226.59","01.05.28-975.16","73.06.05-412.43","99.03.19-824.27","80.03.22-305.57","20.09.05-640.13","52.09.16-697.75","48.12.18-813.30","00.06.17-241.96","26.04.19-468.50","34.09.10-587.84","73.08.01-608.78","06.01.04-404.26","42.01.23-386.07","84.09.09-818.60","54.09.26-153.70","53.02.11-306.06","21.01.26-793.68","57.09.26-826.42","44.12.17-790.96","10.02.13-305.43","85.02.10-912.05","83.01.10-152.37","04.02.09-413.26","54.02.12-763.25","82.10.04-289.25","92.12.08-043.84","72.03.17-781.48","60.03.18-365.85","17.10.07-876.49","74.08.13-464.77","18.11.25-703.01","30.02.13-926.36","35.08.16-091.26","99.06.28-224.87","03.05.03-557.62","07.12.04-638.84","43.07.08-532.83","73.03.09-241.73","04.06.08-544.50","08.01.15-237.02","88.12.26-205.74","15.05.20-117.50","82.03.17-880.62","65.02.22-259.72","61.06.15-992.75","03.11.26-311.48","69.08.03-649.87","00.06.06-517.53","78.06.04-961.17","35.08.26-731.56","58.04.24-695.25","67.04.26-137.33","31.02.10-586.70","82.05.18-435.06","07.08.12-690.55","61.08.02-084.29","07.10.17-925.72","03.09.24-111.03","50.12.24-145.75","53.08.14-923.20","05.01.12-142.27","68.09.26-013.19","97.04.30-256.36","88.11.14-966.54","81.11.11-350.31","02.06.03-122.95","04.09.20-826.11","65.10.26-309.55","96.10.11-441.54","23.10.01-985.52","18.01.07-518.74","14.09.20-337.31","83.01.01-558.95","27.03.13-948.55","20.10.08-464.09","82.09.01-851.31","36.06.04-206.84","88.03.17-852.22","16.09.03-110.34","24.03.20-477.59","67.12.06-617.15","78.08.27-374.25","62.07.06-184.17","53.03.20-557.74","24.02.16-753.90","71.03.29-265.86","36.08.12-804.36","11.12.16-702.35","02.11.10-505.22","48.07.23-433.31","45.02.21-893.18","39.12.22-813.12","32.02.22-174.46","03.05.10-188.27","15.06.13-196.91","61.07.20-037.14","37.11.07-361.89","97.07.15-218.60","23.03.29-026.25","10.09.17-860.96","45.11.09-906.40","18.01.02-499.49","20.07.11-916.28","66.07.14-461.69","60.07.24-059.45","78.12.19-480.90","49.07.19-402.09","51.03.15-363.85","48.01.01-560.37","17.01.25-759.48","46.03.05-256.96","76.09.08-854.80","56.07.15-611.67","43.07.26-688.66","45.01.18-202.16","34.04.19-898.50","09.10.25-832.64","63.11.28-118.54","67.10.05-374.80","97.09.18-516.74","76.07.16-808.66","24.11.26-450.59","40.08.20-735.46","11.08.24-970.81","35.04.21-462.59","21.10.09-629.29","28.11.30-427.46","50.04.23-272.19","52.08.13-858.94","27.04.24-568.15","96.08.03-911.04","69.04.05-154.09","48.10.28-152.86","23.12.17-153.30","54.09.21-359.14","16.12.06-372.91","95.05.30-010.53","49.05.20-854.95","92.11.20-588.45","52.02.06-934.89","86.11.30-690.02","57.11.22-421.96","11.01.09-401.81","71.08.01-167.89","01.11.10-528.75","90.11.10-749.45","89.06.14-269.58","50.06.17-562.20","11.12.28-305.72","60.01.05-539.93","49.04.05-186.42","58.06.21-692.35","92.01.20-565.95","00.11.27-253.13","35.01.08-148.63","94.11.16-540.61","30.12.03-288.74","25.10.17-937.50","46.08.23-583.40","08.03.27-239.42","02.02.26-350.22","53.01.15-947.14","94.07.23-271.92","60.10.25-460.23","83.07.29-789.36","89.06.17-367.64","04.10.23-716.38","95.01.17-469.53","12.09.06-462.90","52.03.03-263.81","57.08.09-148.59","93.01.10-448.48","46.10.24-241.75","15.03.21-068.55","21.06.18-180.83","78.06.19-809.10","26.06.18-667.89","90.12.17-060.46","57.06.23-681.62","08.11.28-414.87","17.11.10-652.93","07.11.19-231.34","22.12.17-298.58","98.08.02-795.95","86.01.16-660.91","96.05.02-713.17","32.07.10-319.05","92.02.18-068.77","34.07.29-029.58","29.09.05-798.44","95.09.03-702.05","45.09.20-105.12","74.10.04-584.47","81.12.03-485.46","98.01.12-431.13","93.09.07-122.35","63.11.08-284.03","07.03.17-429.34","91.03.15-465.47","21.12.05-592.06","44.02.26-031.30","56.11.09-555.40","45.06.06-443.73","69.11.10-335.18","09.09.12-097.18","08.07.10-761.58","11.03.24-661.64","50.10.26-284.56","91.07.14-470.03","77.02.26-279.87","18.06.17-004.32","00.01.09-469.73","07.11.24-587.13","56.08.23-675.61","17.07.13-726.95","43.06.19-056.28","70.08.19-676.86","87.10.18-449.35","36.04.20-215.66","87.02.16-765.14","30.06.02-680.58","02.04.22-806.88","23.02.20-452.56","79.01.20-801.71","69.08.25-113.60","19.09.06-705.91","07.09.16-007.43","65.07.02-365.19","71.07.27-806.21","46.11.23-899.36","26.04.22-932.78","21.10.26-823.04","03.06.13-782.29","50.04.26-198.03","64.08.13-344.84","51.12.30-090.68","04.06.11-859.33","90.02.27-983.14","09.01.15-727.18","55.09.23-714.08","55.01.09-869.23","85.08.04-024.48","75.01.04-296.02","54.01.16-579.82","26.01.01-619.30","48.12.09-564.64","84.12.06-439.65","64.11.07-214.27","20.06.01-101.69","04.11.24-065.84","64.11.30-518.03","34.04.18-299.97","70.03.25-107.52","73.10.23-678.41","59.09.17-360.44","46.06.12-207.53","96.05.19-325.89","40.09.28-731.11","23.01.24-466.12","10.11.16-092.35","80.03.19-647.96","89.12.29-938.48","32.06.24-661.12","75.02.02-192.76","48.09.28-218.13","92.03.13-333.66","88.01.12-609.13","67.09.30-189.90","12.05.03-316.07","33.02.19-214.20","23.08.19-675.02","11.12.29-295.52","53.04.01-069.72","24.02.21-138.70","87.05.01-503.68","66.05.08-005.12","64.05.09-960.52","63.06.02-301.34","13.12.02-284.42","57.01.19-577.57","91.01.23-623.23","89.11.28-322.08","33.01.03-348.68","55.10.02-507.76","02.01.26-655.01","65.08.26-008.51","90.04.29-945.06","88.07.06-723.24","57.01.29-532.93","95.11.20-743.50","61.12.16-279.24","33.12.19-302.02","16.02.07-753.95","16.12.29-521.28","35.11.02-450.11","90.08.09-093.31","85.04.18-508.86","02.03.13-356.25","37.11.14-705.20","87.05.23-377.19","43.01.24-359.25","83.04.23-430.69","73.08.14-666.18","39.09.26-838.40","31.07.14-650.18","95.09.11-797.58","53.06.16-143.47","44.10.18-071.92","81.10.26-020.01","39.06.30-811.23","15.07.15-253.78","09.02.05-313.60","49.10.09-708.24","14.03.17-595.15","05.01.01-087.24","34.01.30-519.78","17.01.07-118.65","71.06.06-256.30","01.02.14-068.61","66.03.13-720.06","91.09.01-802.75","91.10.03-742.82","27.09.04-944.80","81.06.04-600.53","85.06.13-629.32","66.05.27-638.70","14.04.11-643.57","02.03.18-677.39","90.08.11-656.87","54.11.22-777.65","86.05.24-728.05","94.09.28-235.89","50.10.28-476.95","74.07.12-951.01","92.09.09-989.57","07.10.14-113.04","73.03.09-020.03","70.05.11-608.82","70.03.02-985.58","43.07.29-343.30","93.06.30-502.11","16.12.12-995.64","59.05.17-286.90","72.03.25-841.39","10.11.27-352.27","07.03.16-943.35","59.03.03-692.90","71.12.13-840.54","17.07.30-611.88","52.07.01-004.40","04.02.06-709.14","29.01.25-580.91","82.07.02-220.36","93.11.10-621.42","22.08.21-630.63","76.03.13-970.63","78.08.12-956.87","81.06.05-642.78","78.03.13-407.86","47.08.09-543.36","59.12.22-247.28","11.05.28-313.15","57.03.12-365.08","32.01.22-942.47","15.04.29-947.10","84.04.28-423.44","18.07.06-544.23","73.12.24-912.82","53.08.24-513.33","49.07.15-682.43","88.10.25-868.09","53.09.05-896.33","75.08.07-805.34","02.09.27-275.19","94.03.03-943.89","55.05.11-756.07","51.12.14-020.36","11.12.11-917.67","73.09.07-028.97","73.12.11-238.79","77.04.25-324.86","00.01.21-104.78","20.03.08-584.34","04.07.12-317.67","56.09.29-226.46","36.08.11-831.39","22.10.19-664.06","63.11.10-345.76","89.02.12-155.10","03.02.01-685.70","08.09.20-832.89","63.12.10-517.08","52.08.25-914.66","23.08.06-439.46","07.08.17-559.36","78.11.23-129.23","27.08.11-626.84","90.12.24-107.80","42.06.29-991.33","52.11.15-121.16","48.09.19-093.20","88.11.30-945.80","15.09.23-607.80","01.08.08-513.32","63.01.14-210.21","06.02.26-567.83","57.03.19-752.90","32.01.20-801.54","06.07.18-447.90","34.02.02-808.54","02.05.06-325.86","53.09.20-683.87","17.10.19-692.67","11.12.09-065.09","40.06.17-154.24","59.06.06-057.74","57.10.07-858.05","57.03.21-950.26","23.09.16-968.97","13.09.14-295.38","36.05.16-140.74","73.12.21-563.36","18.08.03-823.35","26.07.26-253.76","70.09.09-320.70","15.03.29-076.01","75.05.24-230.78","77.01.13-536.19","40.09.23-161.52","42.02.27-214.66","45.11.22-730.20","43.08.22-806.75","89.11.16-719.68","97.09.24-001.21"};



        // LICENSE TYPES



        // CREATION OF VEHICLE FUELTYPES LIST
        private static List<(int, int)> VehicleFuelTypes()
        {
            // FuelType ID's = 61-75
            // Vehicle ID's = 1001-2000

            Random r = new Random();
            List<(int, int)> vehicleFuelTypes = new List<(int, int)>();

            for (int v = 1001; v < 2001; v++) // LOOP EVERY VEHICLE
            {
                int fuelKind = r.Next(1, 5);
                switch (fuelKind)
                {
                    case 1: // Petrol
                        for(int f = 61; f <= 64; f++)
                        {
                            vehicleFuelTypes.Add((v, f));
                        }
                        break;
                    case 2: // Diesel
                        for (int f = 65; f <= 68; f++)
                        {
                            vehicleFuelTypes.Add((v, f));
                        }
                        break;
                    case 3: // Other
                        for (int f = 69; f <= 72; f++)
                        {
                            vehicleFuelTypes.Add((v, f));
                        }
                        break;
                    case 4: // Electric
                        for (int f = 73; f <= 75; f++)
                        {
                            vehicleFuelTypes.Add((v, f));
                        }
                        break;
                }

            }

            return vehicleFuelTypes;
        }


        // CREATION OF DUMMY DATA LISTS
        private static List<string> licenseTypes = new List<string>
        {
            "AM",
            "A1",
            "A2",
            "A",
            "B",
            "C1",
            "C",
            "D1",
            "D",
            "BE",
            "C1E",
            "CE",
            "D1E",
            "DE",
            "G"
        };
        private static List<string> fuelTypes = new List<string>
        {
            "Petrol 98",
            "Petrol 95",
            "Premium Petrol",
            "Super Petrol",
            "Diesel",
            "Super Diesel",
            "Premium Diesel",
            "Bio Diesel",
            "LPG",
            "Hydrogen",
            "Ethanol",
            "Butane",
            "Electric Basic Charge",
            "Electric Fast Charge",
            "Electric Tesla Charge"
        };
        private static List<Vehicle> vehicles = new List<Vehicle>();


        // CREATION OF RANDOM VEHICLES
        private static List<string> carBrands = new List<string>
        {
            "BMW",
            "Audi",
            "Mercedes",
            "Volkswagen",
            "Volvo",
            "Porsche",
            "Ferrari",
            "Toyota",
            "Ford",
            "Bugatti",
            "Lamborghini",
            "Bentley",
            "Aston Martin",
            "Lexus"
        };
        private static List<string> carModels = new List<string>
        {
            "911 Turbo",
            "911 GT2 RS",
            "911 GT3 RS",
            "M1",
            "M2",
            "M3",
            "M4",
            "M5",
            "Golf",
            "Golf GTI",
            "Golf R",
            "AMG C63",
            "RS6",
            "RS3",
            "1",
            "2",
            "3",
            "4",
            "5"
        };
        private static List<string> carColors = new List<string>
        {
            "Red",
            "Magenta",
            "British Racing Green",
            "Blue",
            "Silver Metallic",
            "Black",
            "Black Matte",
            "Black Metallic",
            "Dark Blue",
            "White",
            "Grey",
            "Blue Grey",
            "Melange White",
            "Yellow",
            "Brown",
            "Green"
        };
        private static List<string> carType = new List<string>
        {
            "Personenwagen",
            "Sportwagen",
            "SUV",
            "Stationwagen",
            "Bestelwagen"
        };
        private static string RandomChassis()
        {
            Random r = new Random();
            string alph = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            string chassis = "";
            for (int i = 0; i < 8; i++)
            {
                chassis += alph[r.Next(0, 26)];
            }
            for (int i = 8; i < 17; i++)
            {
                chassis += r.Next(0, 10);
            }
            return chassis;
        }
        private static string RandomLicense()
        {
            Random r = new Random();
            string alph = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            string license = "";
            license += r.Next(0, 2);
            license += "-";
            for (int i = 0; i < 3; i++)
            {
                license += alph[r.Next(0, 26)];
            }
            license += "-";
            for (int i = 0; i < 3; i++)
            {
                license += r.Next(0, 10);
            }
            return license;
        }
        private static string RndOfList(List<string> list)
        {
            Random r = new Random();
            return list[r.Next(0, list.Count - 1)];
        }
        private static List<Vehicle> CreateVehicles()
        {
            Random r = new Random();
            List<Vehicle> vehicles = new List<Vehicle>();

            for (int i = 0; i < 1000; i++)
            {
                Vehicle vehicle = new Vehicle(RndOfList(carBrands), RndOfList(carModels), RandomChassis(), RandomLicense(), new List<FuelType> { new FuelType("Diesel") }, RndOfList(carType), RndOfList(carColors), r.Next(5, 8));
                vehicles.Add(vehicle);
            }

            return vehicles;
        }
        private static void TestBulkInsertVehicle()
        {
            try
            {
                InitRepository repo = new InitRepository();
                repo.BulkInsertVehicle(CreateVehicles());
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        // CREATION OF RANDOM FUELCARDS
        private static string RandomCardNumber()
        {
            Random r = new Random();
            string cardNr = "";
            for (int i = 0; i < 6; i++)
            {
                cardNr += r.Next(0, 10).ToString();
            }
            return cardNr;
        }
        private static string RandomPin()
        {
            string pin = "";
            Random r = new Random();
            for (int i = 0; i < 4; i++)
            {
                pin += r.Next(0, 10).ToString();
            }
            return pin;
        }
        private static DateTime RandomValidityDate()
        {
            Random r = new Random();
            DateTime dte = new DateTime(2021 + r.Next(5, 11), r.Next(1, 13), r.Next(1, 28));
            return dte;
        }
        private static FuelCard RandomFuelCard()
        {
            FuelCard fuelCard = new FuelCard(RandomCardNumber(), RandomValidityDate(), RandomPin(), true);
            return fuelCard;
        }







        private static void TestInsertLicenseTypes()
        {
            InitRepository repo = new InitRepository();
            foreach (string s in licenseTypes)
            {
                repo.InsertLicenseType(s);
                Console.WriteLine(s);
            }
        }
        private static void TestInsertFuelTypes()
        {
            InitRepository repo = new InitRepository();
            foreach (string s in fuelTypes)
            {
                repo.InsertFuelType(s);
                Console.WriteLine(s);
            }
        }
        private static void TestAddFuelCard()
        {
            FuelCardManager fuelCardManager = new FuelCardManager(new FuelCardRepository());

            FuelCard fuelCard = new FuelCard("123456789", new DateTime(2021, 10, 27), "0123", new List<FuelType>(), true);

            Console.WriteLine("TEST Add Fuelcard: ");
            Console.WriteLine(fuelCard.ToString());

            try
            {
                FuelCardRepository repo = new FuelCardRepository();
                repo.AddFuelCard(fuelCard);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message} \n {ex}");
            }
        }
        private static void TestGetAllFuelCards()
        {
            try
            {
                FuelCardRepository repo = new FuelCardRepository();
                Console.WriteLine(repo.GetAllFuelCards().Count);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message} \n {ex}");
            }
        }
        private static void TestGetFuelCard()
        {
            try
            {
                FuelCardRepository repo = new FuelCardRepository();
                Console.WriteLine(repo.GetFuelCard(1).ToString());
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        




    }

}




